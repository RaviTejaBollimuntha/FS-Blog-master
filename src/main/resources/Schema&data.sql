/*
SQLyog Ultimate v12.4.1 (64 bit)
MySQL - 5.7.20-log : Database - fsblog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`fsblog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `fsblog`;

/*Table structure for table `admin_user` */

DROP TABLE IF EXISTS `admin_user`;

CREATE TABLE `admin_user` (
  `id` int(12) unsigned NOT NULL AUTO_INCREMENT COMMENT 'PrimaryKey',
  `username` varchar(20) NOT NULL COMMENT 'Username',
  `password` varchar(40) NOT NULL,
  `birth_date` date DEFAULT NULL,
  `nickname` varchar(20) DEFAULT NULL,
  `email` varchar(40) DEFAULT NULL,
  `github` varchar(40) DEFAULT NULL,
  `qq` varchar(15) DEFAULT NULL,
  `wecaht` varchar(20) DEFAULT NULL,
  `hobby` text,
  `motto` text,
  `md_info` text,
  `avatar` varchar(255) DEFAULT NULL COMMENT 'Avatar url',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

/*Data for the table `admin_user` */

insert  into `admin_user`(`id`,`username`,`password`,`birth_date`,`nickname`,`email`,`github`,`qq`,`wecaht`,`hobby`,`motto`,`md_info`,`avatar`,`gmt_create`,`gmt_modified`) values 
(1,'admin','e10adc3949ba59abbe56e057f20f883e','1996-11-20','BRT','raviteja.bollimuntha@gmail.com','https://github.com/RaviTejaBollimuntha','1146556298',NULL,'Programming',NULL,NULL,'','2017-12-04 13:07:32','2018-07-28 09:25:37');

/*Table structure for table `article` */

DROP TABLE IF EXISTS `article`;

CREATE TABLE `article` (
  `id` int(12) unsigned NOT NULL AUTO_INCREMENT COMMENT 'PrimaryKey',
  `title` varchar(50) DEFAULT NULL,
  `introduction` text,
  `html_material` text COMMENT 'Article html content',
  `md_material` text COMMENT 'Article content',
  `gmt_create` datetime DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8;

/*Data for the table `article` */

insert  into `article`(`id`,`title`,`introduction`,`html_material`,`md_material`,`gmt_create`,`gmt_modified`) values 
(69,'Bootstrap a Simple Application','Spring Boot Tutorial','<div class=\"markdown-body editormd-preview-container\" previewcontainer=\"true\" style=\"padding: 20px;\"><ol>\r\n<li>Overview<br>Spring Boot is an opinionated, convention-over-configuration focused addition to the Spring platform – highly useful to get started with minimum effort and create stand-alone, production-grade applications.</li></ol>\r\n<p>This tutorial is a starting point for Boot – a way to get started in a simple manner, with a basic web application.</p>\r\n<p>We’ll go over some core configuration, a front-end, quick data manipulation, and exception handling.</p>\r\n<ol>\r\n<li>Setup<br>First, let’s use Spring Initializr to generate the base for our project.</li></ol>\r\n<p>The generated project relies on the Boot parent:</p>\r\n<p>&lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;<br>    &lt;relativePath /&gt;<br>&lt;/parent&gt;<br>The initial dependencies are going to be quite simple:</p>\r\n<p>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>&lt;/dependency&gt;</p>\r\n<p>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;<br>&lt;/dependency&gt;</p>\r\n<p>&lt;dependency&gt;<br>    &lt;groupId&gt;com.h2database&lt;/groupId&gt;<br>    &lt;artifactId&gt;h2&lt;/artifactId&gt;<br>&lt;/dependency&gt;</p>\r\n<ol>\r\n<li>Application Configuration<br>Next, we’ll configure a simple main class for our application:</li></ol>\r\n<p><a href=\"https://github.com/SpringBootApplication\" title=\"@SpringBootApplication\" class=\"at-link\">@SpringBootApplication</a><br>public class Application {<br>    public static void main(String[] args) {<br>        SpringApplication.run(Application.class, args);<br>    }<br>}<br>Notice how we’re using <a href=\"https://github.com/SpringBootApplication\" title=\"@SpringBootApplication\" class=\"at-link\">@SpringBootApplication</a> as our primary application configuration class; behind the scenes, that’s equivalent to <a href=\"https://github.com/Configuration\" title=\"@Configuration\" class=\"at-link\">@Configuration</a>, <a href=\"https://github.com/EnableAutoConfiguration\" title=\"@EnableAutoConfiguration\" class=\"at-link\">@EnableAutoConfiguration</a>, and <a href=\"https://github.com/ComponentScan\" title=\"@ComponentScan\" class=\"at-link\">@ComponentScan</a> together.</p>\r\n<p>Finally, we’ll define a simple application.properties file – which for now only has one property:</p>\r\n<p>server.port=8081<br>server.port changes the server port from the default 8080 to 8081; there are of course many more Spring Boot properties available.</p>\r\n<ol>\r\n<li>Simple MVC View<br>Let’s now add a simple front end using Thymeleaf.</li></ol>\r\n<p>First, we need to add the spring-boot-starter-thymeleaf dependency to our pom.xml:</p>\r\n<p>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>That enables Thymeleaf by default – no extra configuration is necessary.</p>\r\n<p>We can now configure it in our application.properties:</p>\r\n<p>spring.thymeleaf.cache=false<br>spring.thymeleaf.enabled=true<br>spring.thymeleaf.prefix=classpath:/templates/<br>spring.thymeleaf.suffix=.html</p>\r\n<p>spring.application.name=Bootstrap Spring Boot<br>Next, we’ll define a simple controller and a basic home page – with a welcome message:</p>\r\n<p><a href=\"https://github.com/Controller\" title=\"@Controller\" class=\"at-link\">@Controller</a><br>public class SimpleController {<br>    <a href=\"https://github.com/Value\" title=\"@Value\" class=\"at-link\">@Value</a>(“${spring.application.name}”)<br>    String appName;</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"lit\">@GetMapping</span><span class=\"pun\">(</span><span class=\"str\">\"/\"</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> homePage</span><span class=\"pun\">(</span><span class=\"typ\">Model</span><span class=\"pln\"> model</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    model</span><span class=\"pun\">.</span><span class=\"pln\">addAttribute</span><span class=\"pun\">(</span><span class=\"str\">\"appName\"</span><span class=\"pun\">,</span><span class=\"pln\"> appName</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"str\">\"home\"</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>}<br>Finally, here is our home.html:</p>\r\n<p>&lt;html&gt;</p>\r\n<p>&lt;head&gt;&lt;title&gt;Home Page&lt;/title&gt;&lt;/head&gt;</p>\r\n<p>&lt;body&gt;</p>\r\n<p>&lt;h1&gt;Hello !&lt;/h1&gt;</p>\r\n<p>&lt;p&gt;Welcome to &lt;span th:text=\"${appName}\"&gt;Our App&lt;/span&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>Note how we used a property we defined in our properties – and then injected that so that we can show it on our home page.</p>\r\n<ol>\r\n<li>Security<br>Next, let’s add security to our application – by first including the security starter:</li></ol>\r\n<p>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>By now, you’re hopefully noticing a pattern – most Spring libraries are easily imported into our project with the use of simple Boot starters.</p>\r\n<p>Once the spring-boot-starter-security dependency on the classpath of the application – all endpoints are secured by default, using either httpBasic or formLogin based on Spring Security’s content-negotiation strategy.</p>\r\n<p>That’s why, if we have the starter on the classpath, we should usually define our own custom Security configuration by extending the WebSecurityConfigurerAdapter class:</p>\r\n<p><a href=\"https://github.com/Configuration\" title=\"@Configuration\" class=\"at-link\">@Configuration</a><br><a href=\"https://github.com/EnableWebSecurity\" title=\"@EnableWebSecurity\" class=\"at-link\">@EnableWebSecurity</a><br>public class SecurityConfig extends WebSecurityConfigurerAdapter {</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"lit\">@Override</span></code></li><li class=\"L1\"><code><span class=\"kwd\">protected</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> configure</span><span class=\"pun\">(</span><span class=\"typ\">HttpSecurity</span><span class=\"pln\"> http</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">throws</span><span class=\"pln\"> </span><span class=\"typ\">Exception</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    http</span><span class=\"pun\">.</span><span class=\"pln\">authorizeRequests</span><span class=\"pun\">()</span></code></li><li class=\"L3\"><code><span class=\"pln\">        </span><span class=\"pun\">.</span><span class=\"pln\">anyRequest</span><span class=\"pun\">()</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"pun\">.</span><span class=\"pln\">permitAll</span><span class=\"pun\">()</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"pun\">.</span><span class=\"kwd\">and</span><span class=\"pun\">().</span><span class=\"pln\">csrf</span><span class=\"pun\">().</span><span class=\"pln\">disable</span><span class=\"pun\">();</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>}<br>In our example, we’re allowing unrestricted access to all endpoints.</p>\r\n<p>Of course, Spring Security is an extensive topic and one not easily covered in a couple of lines of configuration – so I definitely encourage you to go deeper into the topic.</p>\r\n<ol>\r\n<li>Simple Persistence<br>Let’s start by defining our data model – a simple Book entity:</li></ol>\r\n<p><a href=\"https://github.com/Entity\" title=\"@Entity\" class=\"at-link\">@Entity</a><br>public class Book {</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"lit\">@Id</span></code></li><li class=\"L1\"><code><span class=\"lit\">@GeneratedValue</span><span class=\"pun\">(</span><span class=\"pln\">strategy </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">GenerationType</span><span class=\"pun\">.</span><span class=\"pln\">AUTO</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"kwd\">long</span><span class=\"pln\"> id</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"lit\">@Column</span><span class=\"pun\">(</span><span class=\"pln\">nullable </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">,</span><span class=\"pln\"> unique </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> title</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"lit\">@Column</span><span class=\"pun\">(</span><span class=\"pln\">nullable </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">false</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> author</span><span class=\"pun\">;</span></code></li></ol></pre><p>}<br>And its repository, making good use of Spring Data here:</p>\r\n<p>public interface BookRepository extends CrudRepository&lt;Book, Long&gt; {<br>    List&lt;Book&gt; findByTitle(String title);<br>}<br>Finally, we need to of course configure our new persistence layer:</p>\r\n<p><a href=\"https://github.com/EnableJpaRepositories\" title=\"@EnableJpaRepositories\" class=\"at-link\">@EnableJpaRepositories</a>(“org.baeldung.persistence.repo”)<br><a href=\"https://github.com/EntityScan\" title=\"@EntityScan\" class=\"at-link\">@EntityScan</a>(“org.baeldung.persistence.model”)<br><a href=\"https://github.com/SpringBootApplication\" title=\"@SpringBootApplication\" class=\"at-link\">@SpringBootApplication</a><br>public class Application {<br>   …<br>}<br>Note that we’re using:</p>\r\n<p><a href=\"https://github.com/EnableJpaRepositories\" title=\"@EnableJpaRepositories\" class=\"at-link\">@EnableJpaRepositories</a> to scan the specified package for repositories<br><a href=\"https://github.com/EntityScan\" title=\"@EntityScan\" class=\"at-link\">@EntityScan</a> to pick up our JPA entities<br>To keep things simple, we’re using an H2 in-memory database here – so that we don’t have any external dependencies when we run the project.</p>\r\n<p>Once we include H2 dependency, Spring Boot auto-detects it and sets up our persistence with no need for extra configuration, other than the data source properties:</p>\r\n<p>spring.datasource.driver-class-name=org.h2.Driver<br>spring.datasource.url=jdbc:h2:mem:bootapp;DB_CLOSE_DELAY=-1<br>spring.datasource.username=sa<br>spring.datasource.password=<br>Of course, like security, persistence is a broader topic than this basic set here, and one you should certainly explore further.</p>\r\n<ol>\r\n<li>Web and the Controller<br>Next, let’s have a look at a web tier – and we’ll start that by setting up a simple controller – the BookController.</li></ol>\r\n<p>We’ll implement basic CRUD operations exposing Book resources with some simple validation:</p>\r\n<p><a href=\"https://github.com/RestController\" title=\"@RestController\" class=\"at-link\">@RestController</a><br><a href=\"https://github.com/RequestMapping\" title=\"@RequestMapping\" class=\"at-link\">@RequestMapping</a>(“/api/books”)<br>public class BookController {</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"lit\">@Autowired</span></code></li><li class=\"L1\"><code><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">BookRepository</span><span class=\"pln\"> bookRepository</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"lit\">@GetMapping</span></code></li><li class=\"L4\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Iterable</span><span class=\"pln\"> findAll</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> bookRepository</span><span class=\"pun\">.</span><span class=\"pln\">findAll</span><span class=\"pun\">();</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li><li class=\"L7\"><code></code></li><li class=\"L8\"><code><span class=\"lit\">@GetMapping</span><span class=\"pun\">(</span><span class=\"str\">\"/title/{bookTitle}\"</span><span class=\"pun\">)</span></code></li><li class=\"L9\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pln\"> findByTitle</span><span class=\"pun\">(</span><span class=\"lit\">@PathVariable</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> bookTitle</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> bookRepository</span><span class=\"pun\">.</span><span class=\"pln\">findByTitle</span><span class=\"pun\">(</span><span class=\"pln\">bookTitle</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"pun\">}</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"lit\">@GetMapping</span><span class=\"pun\">(</span><span class=\"str\">\"/{id}\"</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Book</span><span class=\"pln\"> findOne</span><span class=\"pun\">(</span><span class=\"lit\">@PathVariable</span><span class=\"pln\"> </span><span class=\"typ\">Long</span><span class=\"pln\"> id</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> bookRepository</span><span class=\"pun\">.</span><span class=\"pln\">findById</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code><span class=\"pln\">      </span><span class=\"pun\">.</span><span class=\"pln\">orElseThrow</span><span class=\"pun\">(</span><span class=\"typ\">BookNotFoundException</span><span class=\"pun\">::</span><span class=\"kwd\">new</span><span class=\"pun\">);</span></code></li><li class=\"L7\"><code><span class=\"pun\">}</span></code></li><li class=\"L8\"><code></code></li><li class=\"L9\"><code><span class=\"lit\">@PostMapping</span></code></li><li class=\"L0\"><code><span class=\"lit\">@ResponseStatus</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">CREATED</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Book</span><span class=\"pln\"> create</span><span class=\"pun\">(</span><span class=\"lit\">@RequestBody</span><span class=\"pln\"> </span><span class=\"typ\">Book</span><span class=\"pln\"> book</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> bookRepository</span><span class=\"pun\">.</span><span class=\"pln\">save</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pun\">}</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"lit\">@DeleteMapping</span><span class=\"pun\">(</span><span class=\"str\">\"/{id}\"</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"kwd\">delete</span><span class=\"pun\">(</span><span class=\"lit\">@PathVariable</span><span class=\"pln\"> </span><span class=\"typ\">Long</span><span class=\"pln\"> id</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L7\"><code><span class=\"pln\">    bookRepository</span><span class=\"pun\">.</span><span class=\"pln\">findById</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">      </span><span class=\"pun\">.</span><span class=\"pln\">orElseThrow</span><span class=\"pun\">(</span><span class=\"typ\">BookNotFoundException</span><span class=\"pun\">::</span><span class=\"kwd\">new</span><span class=\"pun\">);</span></code></li><li class=\"L9\"><code><span class=\"pln\">    bookRepository</span><span class=\"pun\">.</span><span class=\"pln\">deleteById</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code><span class=\"pun\">}</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"lit\">@PutMapping</span><span class=\"pun\">(</span><span class=\"str\">\"/{id}\"</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Book</span><span class=\"pln\"> updateBook</span><span class=\"pun\">(</span><span class=\"lit\">@RequestBody</span><span class=\"pln\"> </span><span class=\"typ\">Book</span><span class=\"pln\"> book</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">@PathVariable</span><span class=\"pln\"> </span><span class=\"typ\">Long</span><span class=\"pln\"> id</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">.</span><span class=\"pln\">getId</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">!=</span><span class=\"pln\"> id</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">      </span><span class=\"kwd\">throw</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">BookIdMismatchException</span><span class=\"pun\">();</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pln\">    bookRepository</span><span class=\"pun\">.</span><span class=\"pln\">findById</span><span class=\"pun\">(</span><span class=\"pln\">id</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">      </span><span class=\"pun\">.</span><span class=\"pln\">orElseThrow</span><span class=\"pun\">(</span><span class=\"typ\">BookNotFoundException</span><span class=\"pun\">::</span><span class=\"kwd\">new</span><span class=\"pun\">);</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> bookRepository</span><span class=\"pun\">.</span><span class=\"pln\">save</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>}<br>Given this aspect of the application is an API, we made use of the <a href=\"https://github.com/RestController\" title=\"@RestController\" class=\"at-link\">@RestController</a> annotation here – which equivalent to a <a href=\"https://github.com/Controller\" title=\"@Controller\" class=\"at-link\">@Controller</a> along with <a href=\"https://github.com/ResponseBody\" title=\"@ResponseBody\" class=\"at-link\">@ResponseBody</a> – so that each method marshalls the returned resource right to the HTTP response.</p>\r\n<p>Just one note worth pointing out – we’re exposing our Book entity as our external resource here. That’s fine for our simple application here, but in a real-world application, you will likely want to separate these two concepts.</p>\r\n<ol>\r\n<li>Error Handling<br>Now that the core application is ready to go, let’s focus on a simple centralized error handling mechanism using <a href=\"https://github.com/ControllerAdvice\" title=\"@ControllerAdvice\" class=\"at-link\">@ControllerAdvice</a>:</li></ol>\r\n<p><a href=\"https://github.com/ControllerAdvice\" title=\"@ControllerAdvice\" class=\"at-link\">@ControllerAdvice</a><br>public class RestExceptionHandler extends ResponseEntityExceptionHandler {</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"lit\">@ExceptionHandler</span><span class=\"pun\">({</span><span class=\"pln\"> </span><span class=\"typ\">BookNotFoundException</span><span class=\"pun\">.</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"pun\">})</span></code></li><li class=\"L1\"><code><span class=\"kwd\">protected</span><span class=\"pln\"> </span><span class=\"typ\">ResponseEntity</span><span class=\"pun\">&lt;</span><span class=\"typ\">Object</span><span class=\"pun\">&gt;</span><span class=\"pln\"> handleNotFound</span><span class=\"pun\">(</span></code></li><li class=\"L2\"><code><span class=\"pln\">  </span><span class=\"typ\">Exception</span><span class=\"pln\"> ex</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"typ\">WebRequest</span><span class=\"pln\"> request</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> handleExceptionInternal</span><span class=\"pun\">(</span><span class=\"pln\">ex</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\"Book not found\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span></code></li><li class=\"L4\"><code><span class=\"pln\">      </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">HttpHeaders</span><span class=\"pun\">(),</span><span class=\"pln\"> </span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">NOT_FOUND</span><span class=\"pun\">,</span><span class=\"pln\"> request</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code><span class=\"pun\">}</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"lit\">@ExceptionHandler</span><span class=\"pun\">({</span><span class=\"pln\"> </span><span class=\"typ\">BookIdMismatchException</span><span class=\"pun\">.</span><span class=\"kwd\">class</span><span class=\"pun\">,</span><span class=\"pln\"> </span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"typ\">ConstraintViolationException</span><span class=\"pun\">.</span><span class=\"kwd\">class</span><span class=\"pun\">,</span><span class=\"pln\"> </span></code></li><li class=\"L9\"><code><span class=\"pln\">  </span><span class=\"typ\">DataIntegrityViolationException</span><span class=\"pun\">.</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"pun\">})</span></code></li><li class=\"L0\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">ResponseEntity</span><span class=\"pun\">&lt;</span><span class=\"typ\">Object</span><span class=\"pun\">&gt;</span><span class=\"pln\"> handleBadRequest</span><span class=\"pun\">(</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"typ\">Exception</span><span class=\"pln\"> ex</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"typ\">WebRequest</span><span class=\"pln\"> request</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> handleExceptionInternal</span><span class=\"pun\">(</span><span class=\"pln\">ex</span><span class=\"pun\">,</span><span class=\"pln\"> ex</span><span class=\"pun\">.</span><span class=\"pln\">getLocalizedMessage</span><span class=\"pun\">(),</span><span class=\"pln\"> </span></code></li><li class=\"L3\"><code><span class=\"pln\">      </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">HttpHeaders</span><span class=\"pun\">(),</span><span class=\"pln\"> </span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">BAD_REQUEST</span><span class=\"pun\">,</span><span class=\"pln\"> request</span><span class=\"pun\">);</span></code></li><li class=\"L4\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>}<br>Beyond the standard exceptions we’re handling here, we’re also using a custom exception:</p>\r\n<p>BookNotFoundException:</p>\r\n<p>public class BookNotFoundException extends RuntimeException {</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">BookNotFoundException</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pln\"> message</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"typ\">Throwable</span><span class=\"pln\"> cause</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"kwd\">super</span><span class=\"pun\">(</span><span class=\"pln\">message</span><span class=\"pun\">,</span><span class=\"pln\"> cause</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li><li class=\"L3\"><code><span class=\"com\">// ...</span></code></li></ol></pre><p>}<br>This should give you an idea of what’s possible with this global exception handling mechanism. If you’d like to see a full implementation, have a look at the in-depth tutorial.</p>\r\n<p>Note that Spring Boot also provides an /error mapping by default. We can customize its view by creating a simple error.html:</p>\r\n<p>&lt;html lang=\"en\"&gt;</p>\r\n<p>&lt;head&gt;&lt;title&gt;Error Occurred&lt;/title&gt;&lt;/head&gt;</p>\r\n<p>&lt;body&gt;<br>    &lt;h1&gt;Error Occurred!&lt;/h1&gt;<br>    &lt;b&gt;[&lt;span th:text=\"${status}\"&gt;status&lt;/span&gt;]<br>        &lt;span th:text=\"${error}\"&gt;error&lt;/span&gt;<br>    &lt;/b&gt;<br>    &lt;p th:text=\"${message}\"&gt;message&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>Like most other aspects in Boot, we can control that with a simple property:</p>\r\n<p>server.error.path=/error2</p>\r\n<ol>\r\n<li>Testing<br>Finally, let’s test our new Books API.</li></ol>\r\n<p>We’ll immediately make use of <a href=\"https://github.com/SpringBootTest\" title=\"@SpringBootTest\" class=\"at-link\">@SpringBootTest</a> to load the application context:</p>\r\n<p><a href=\"https://github.com/RunWith\" title=\"@RunWith\" class=\"at-link\">@RunWith</a>(SpringRunner.class)<br><a href=\"https://github.com/SpringBootTest\" title=\"@SpringBootTest\" class=\"at-link\">@SpringBootTest</a>(classes = { Application.class }, webEnvironment<br>  = WebEnvironment.DEFINED_PORT)<br>public class LiveTest {</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">final</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> API_ROOT</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\"http://localhost:8081/api/books\"</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">Book</span><span class=\"pln\"> createRandomBook</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"typ\">Book</span><span class=\"pln\"> book </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Book</span><span class=\"pun\">();</span></code></li><li class=\"L5\"><code><span class=\"pln\">    book</span><span class=\"pun\">.</span><span class=\"pln\">setTitle</span><span class=\"pun\">(</span><span class=\"pln\">randomAlphabetic</span><span class=\"pun\">(</span><span class=\"lit\">10</span><span class=\"pun\">));</span></code></li><li class=\"L6\"><code><span class=\"pln\">    book</span><span class=\"pun\">.</span><span class=\"pln\">setAuthor</span><span class=\"pun\">(</span><span class=\"pln\">randomAlphabetic</span><span class=\"pun\">(</span><span class=\"lit\">15</span><span class=\"pun\">));</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> book</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pun\">}</span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> createBookAsUri</span><span class=\"pun\">(</span><span class=\"typ\">Book</span><span class=\"pln\"> book</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"typ\">Response</span><span class=\"pln\"> response </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">RestAssured</span><span class=\"pun\">.</span><span class=\"pln\">given</span><span class=\"pun\">()</span></code></li><li class=\"L2\"><code><span class=\"pln\">      </span><span class=\"pun\">.</span><span class=\"pln\">contentType</span><span class=\"pun\">(</span><span class=\"typ\">MediaType</span><span class=\"pun\">.</span><span class=\"pln\">APPLICATION_JSON_VALUE</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code><span class=\"pln\">      </span><span class=\"pun\">.</span><span class=\"pln\">body</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">      </span><span class=\"pun\">.</span><span class=\"pln\">post</span><span class=\"pun\">(</span><span class=\"pln\">API_ROOT</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> API_ROOT </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"str\">\"/\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">jsonPath</span><span class=\"pun\">().</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">\"id\"</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>}<br>First, we can try to find books using variant methods:</p>\r\n<p><a href=\"https://github.com/Test\" title=\"@Test\" class=\"at-link\">@Test</a><br>public void whenGetAllBooks_thenOK() {<br>    Response response = RestAssured.get(API_ROOT);</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">OK</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li></ol></pre><p>}</p>\r\n<p><a href=\"https://github.com/Test\" title=\"@Test\" class=\"at-link\">@Test</a><br>public void whenGetBooksByTitle_thenOK() {<br>    Book book = createRandomBook();<br>    createBookAsUri(book);<br>    Response response = RestAssured.get(<br>      API_ROOT + “/title/“ + book.getTitle());</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">OK</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li><li class=\"L1\"><code><span class=\"pln\">assertTrue</span><span class=\"pun\">(</span><span class=\"pln\">response</span><span class=\"pun\">.</span><span class=\"kwd\">as</span><span class=\"pun\">(</span><span class=\"typ\">List</span><span class=\"pun\">.</span><span class=\"kwd\">class</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pln\">  </span><span class=\"pun\">.</span><span class=\"pln\">size</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">);</span></code></li></ol></pre><p>}<br><a href=\"https://github.com/Test\" title=\"@Test\" class=\"at-link\">@Test</a><br>public void whenGetCreatedBookById_thenOK() {<br>    Book book = createRandomBook();<br>    String location = createBookAsUri(book);<br>    Response response = RestAssured.get(location);</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">OK</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li><li class=\"L1\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"pln\">book</span><span class=\"pun\">.</span><span class=\"pln\">getTitle</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">jsonPath</span><span class=\"pun\">()</span></code></li><li class=\"L2\"><code><span class=\"pln\">  </span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">\"title\"</span><span class=\"pun\">));</span></code></li></ol></pre><p>}</p>\r\n<p><a href=\"https://github.com/Test\" title=\"@Test\" class=\"at-link\">@Test</a><br>public void whenGetNotExistBookById_thenNotFound() {<br>    Response response = RestAssured.get(API_ROOT + “/“ + randomNumeric(4));</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">NOT_FOUND</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li></ol></pre><p>}<br>Next, we’ll test creating a new book:</p>\r\n<p><a href=\"https://github.com/Test\" title=\"@Test\" class=\"at-link\">@Test</a><br>public void whenCreateNewBook_thenCreated() {<br>    Book book = createRandomBook();<br>    Response response = RestAssured.given()<br>      .contentType(MediaType.APPLICATION_JSON_VALUE)<br>      .body(book)<br>      .post(API_ROOT);</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">CREATED</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li></ol></pre><p>}</p>\r\n<p><a href=\"https://github.com/Test\" title=\"@Test\" class=\"at-link\">@Test</a><br>public void whenInvalidBook_thenError() {<br>    Book book = createRandomBook();<br>    book.setAuthor(null);<br>    Response response = RestAssured.given()<br>      .contentType(MediaType.APPLICATION_JSON_VALUE)<br>      .body(book)<br>      .post(API_ROOT);</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">BAD_REQUEST</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li></ol></pre><p>}<br>Update an existing book:</p>\r\n<p><a href=\"https://github.com/Test\" title=\"@Test\" class=\"at-link\">@Test</a><br>public void whenUpdateCreatedBook_thenUpdated() {<br>    Book book = createRandomBook();<br>    String location = createBookAsUri(book);<br>    book.setId(Long.parseLong(location.split(“api/books/“)[1]));<br>    book.setAuthor(“newAuthor”);<br>    Response response = RestAssured.given()<br>      .contentType(MediaType.APPLICATION_JSON_VALUE)<br>      .body(book)<br>      .put(location);</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">OK</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\">response </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">RestAssured</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"pln\">location</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">OK</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li><li class=\"L5\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"str\">\"newAuthor\"</span><span class=\"pun\">,</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">jsonPath</span><span class=\"pun\">()</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">\"author\"</span><span class=\"pun\">));</span></code></li></ol></pre><p>}<br>And delete a book:</p>\r\n<p><a href=\"https://github.com/Test\" title=\"@Test\" class=\"at-link\">@Test</a><br>public void whenDeleteCreatedBook_thenOk() {<br>    Book book = createRandomBook();<br>    String location = createBookAsUri(book);<br>    Response response = RestAssured.delete(location);</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">OK</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\">response </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">RestAssured</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"pln\">location</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">assertEquals</span><span class=\"pun\">(</span><span class=\"typ\">HttpStatus</span><span class=\"pun\">.</span><span class=\"pln\">NOT_FOUND</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">(),</span><span class=\"pln\"> response</span><span class=\"pun\">.</span><span class=\"pln\">getStatusCode</span><span class=\"pun\">());</span></code></li></ol></pre><p>}</p>\r\n<ol>\r\n<li>Conclusion<br>This was a quick but comprehensive intro to Spring Boot.</li></ol>\r\n<p>We of course barely scratched the surface here – there’s a lot more to this framework that we can cover in a single intro article.</p>\r\n</div>','1. Overview\r\nSpring Boot is an opinionated, convention-over-configuration focused addition to the Spring platform – highly useful to get started with minimum effort and create stand-alone, production-grade applications.\r\n\r\nThis tutorial is a starting point for Boot – a way to get started in a simple manner, with a basic web application.\r\n\r\nWe’ll go over some core configuration, a front-end, quick data manipulation, and exception handling.\r\n\r\n2. Setup\r\nFirst, let’s use Spring Initializr to generate the base for our project.\r\n\r\nThe generated project relies on the Boot parent:\r\n\r\n\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.0.1.RELEASE</version>\r\n    <relativePath />\r\n</parent>\r\nThe initial dependencies are going to be quite simple:\r\n\r\n\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n</dependency>\r\n3. Application Configuration\r\nNext, we’ll configure a simple main class for our application:\r\n\r\n@SpringBootApplication\r\npublic class Application {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\nNotice how we’re using @SpringBootApplication as our primary application configuration class; behind the scenes, that’s equivalent to @Configuration, @EnableAutoConfiguration, and @ComponentScan together.\r\n\r\nFinally, we’ll define a simple application.properties file – which for now only has one property:\r\n\r\n\r\nserver.port=8081\r\nserver.port changes the server port from the default 8080 to 8081; there are of course many more Spring Boot properties available.\r\n\r\n4. Simple MVC View\r\nLet’s now add a simple front end using Thymeleaf.\r\n\r\nFirst, we need to add the spring-boot-starter-thymeleaf dependency to our pom.xml:\r\n\r\n\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId> \r\n</dependency>\r\nThat enables Thymeleaf by default – no extra configuration is necessary.\r\n\r\nWe can now configure it in our application.properties:\r\n\r\nspring.thymeleaf.cache=false\r\nspring.thymeleaf.enabled=true\r\nspring.thymeleaf.prefix=classpath:/templates/\r\nspring.thymeleaf.suffix=.html\r\n \r\nspring.application.name=Bootstrap Spring Boot\r\nNext, we’ll define a simple controller and a basic home page – with a welcome message:\r\n\r\n\r\n@Controller\r\npublic class SimpleController {\r\n    @Value(\"${spring.application.name}\")\r\n    String appName;\r\n \r\n    @GetMapping(\"/\")\r\n    public String homePage(Model model) {\r\n        model.addAttribute(\"appName\", appName);\r\n        return \"home\";\r\n    }\r\n}\r\nFinally, here is our home.html:\r\n\r\n\r\n<html>\r\n<head><title>Home Page</title></head>\r\n<body>\r\n<h1>Hello !</h1>\r\n<p>Welcome to <span th:text=\"${appName}\">Our App</span></p>\r\n</body>\r\n</html>\r\nNote how we used a property we defined in our properties – and then injected that so that we can show it on our home page.\r\n\r\n5. Security\r\nNext, let’s add security to our application – by first including the security starter:\r\n\r\n\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-security</artifactId> \r\n</dependency>\r\nBy now, you’re hopefully noticing a pattern – most Spring libraries are easily imported into our project with the use of simple Boot starters.\r\n\r\nOnce the spring-boot-starter-security dependency on the classpath of the application – all endpoints are secured by default, using either httpBasic or formLogin based on Spring Security’s content-negotiation strategy.\r\n\r\nThat’s why, if we have the starter on the classpath, we should usually define our own custom Security configuration by extending the WebSecurityConfigurerAdapter class:\r\n\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n \r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests()\r\n            .anyRequest()\r\n            .permitAll()\r\n            .and().csrf().disable();\r\n    }\r\n}\r\nIn our example, we’re allowing unrestricted access to all endpoints.\r\n\r\n \r\n\r\nOf course, Spring Security is an extensive topic and one not easily covered in a couple of lines of configuration – so I definitely encourage you to go deeper into the topic.\r\n\r\n6. Simple Persistence\r\nLet’s start by defining our data model – a simple Book entity:\r\n\r\n\r\n@Entity\r\npublic class Book {\r\n  \r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private long id;\r\n \r\n    @Column(nullable = false, unique = true)\r\n    private String title;\r\n \r\n    @Column(nullable = false)\r\n    private String author;\r\n}\r\nAnd its repository, making good use of Spring Data here:\r\n\r\n\r\npublic interface BookRepository extends CrudRepository<Book, Long> {\r\n    List<Book> findByTitle(String title);\r\n}\r\nFinally, we need to of course configure our new persistence layer:\r\n\r\n@EnableJpaRepositories(\"org.baeldung.persistence.repo\") \r\n@EntityScan(\"org.baeldung.persistence.model\")\r\n@SpringBootApplication\r\npublic class Application {\r\n   ...\r\n}\r\nNote that we’re using:\r\n\r\n@EnableJpaRepositories to scan the specified package for repositories\r\n@EntityScan to pick up our JPA entities\r\nTo keep things simple, we’re using an H2 in-memory database here – so that we don’t have any external dependencies when we run the project.\r\n\r\nOnce we include H2 dependency, Spring Boot auto-detects it and sets up our persistence with no need for extra configuration, other than the data source properties:\r\n\r\nspring.datasource.driver-class-name=org.h2.Driver\r\nspring.datasource.url=jdbc:h2:mem:bootapp;DB_CLOSE_DELAY=-1\r\nspring.datasource.username=sa\r\nspring.datasource.password=\r\nOf course, like security, persistence is a broader topic than this basic set here, and one you should certainly explore further.\r\n\r\n7. Web and the Controller\r\nNext, let’s have a look at a web tier – and we’ll start that by setting up a simple controller – the BookController.\r\n\r\nWe’ll implement basic CRUD operations exposing Book resources with some simple validation:\r\n\r\n\r\n@RestController\r\n@RequestMapping(\"/api/books\")\r\npublic class BookController {\r\n \r\n    @Autowired\r\n    private BookRepository bookRepository;\r\n \r\n    @GetMapping\r\n    public Iterable findAll() {\r\n        return bookRepository.findAll();\r\n    }\r\n \r\n    @GetMapping(\"/title/{bookTitle}\")\r\n    public List findByTitle(@PathVariable String bookTitle) {\r\n        return bookRepository.findByTitle(bookTitle);\r\n    }\r\n \r\n    @GetMapping(\"/{id}\")\r\n    public Book findOne(@PathVariable Long id) {\r\n        return bookRepository.findById(id)\r\n          .orElseThrow(BookNotFoundException::new);\r\n    }\r\n \r\n    @PostMapping\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public Book create(@RequestBody Book book) {\r\n        return bookRepository.save(book);\r\n    }\r\n \r\n    @DeleteMapping(\"/{id}\")\r\n    public void delete(@PathVariable Long id) {\r\n        bookRepository.findById(id)\r\n          .orElseThrow(BookNotFoundException::new);\r\n        bookRepository.deleteById(id);\r\n    }\r\n \r\n    @PutMapping(\"/{id}\")\r\n    public Book updateBook(@RequestBody Book book, @PathVariable Long id) {\r\n        if (book.getId() != id) {\r\n          throw new BookIdMismatchException();\r\n        }\r\n        bookRepository.findById(id)\r\n          .orElseThrow(BookNotFoundException::new);\r\n        return bookRepository.save(book);\r\n    }\r\n}\r\nGiven this aspect of the application is an API, we made use of the @RestController annotation here – which equivalent to a @Controller along with @ResponseBody – so that each method marshalls the returned resource right to the HTTP response.\r\n\r\nJust one note worth pointing out – we’re exposing our Book entity as our external resource here. That’s fine for our simple application here, but in a real-world application, you will likely want to separate these two concepts.\r\n\r\n8. Error Handling\r\nNow that the core application is ready to go, let’s focus on a simple centralized error handling mechanism using @ControllerAdvice:\r\n\r\n\r\n@ControllerAdvice\r\npublic class RestExceptionHandler extends ResponseEntityExceptionHandler {\r\n \r\n    @ExceptionHandler({ BookNotFoundException.class })\r\n    protected ResponseEntity<Object> handleNotFound(\r\n      Exception ex, WebRequest request) {\r\n        return handleExceptionInternal(ex, \"Book not found\", \r\n          new HttpHeaders(), HttpStatus.NOT_FOUND, request);\r\n    }\r\n \r\n    @ExceptionHandler({ BookIdMismatchException.class, \r\n      ConstraintViolationException.class, \r\n      DataIntegrityViolationException.class })\r\n    public ResponseEntity<Object> handleBadRequest(\r\n      Exception ex, WebRequest request) {\r\n        return handleExceptionInternal(ex, ex.getLocalizedMessage(), \r\n          new HttpHeaders(), HttpStatus.BAD_REQUEST, request);\r\n    }\r\n}\r\nBeyond the standard exceptions we’re handling here, we’re also using a custom exception:\r\n\r\nBookNotFoundException:\r\n\r\n\r\npublic class BookNotFoundException extends RuntimeException {\r\n \r\n    public BookNotFoundException(String message, Throwable cause) {\r\n        super(message, cause);\r\n    }\r\n    // ...\r\n}\r\nThis should give you an idea of what’s possible with this global exception handling mechanism. If you’d like to see a full implementation, have a look at the in-depth tutorial.\r\n\r\nNote that Spring Boot also provides an /error mapping by default. We can customize its view by creating a simple error.html:\r\n\r\n<html lang=\"en\">\r\n<head><title>Error Occurred</title></head>\r\n<body>\r\n    <h1>Error Occurred!</h1>    \r\n    <b>[<span th:text=\"${status}\">status</span>]\r\n        <span th:text=\"${error}\">error</span>\r\n    </b>\r\n    <p th:text=\"${message}\">message</p>\r\n</body>\r\n</html>\r\nLike most other aspects in Boot, we can control that with a simple property:\r\n\r\n\r\nserver.error.path=/error2\r\n9. Testing\r\nFinally, let’s test our new Books API.\r\n\r\nWe’ll immediately make use of @SpringBootTest to load the application context:\r\n\r\n\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(classes = { Application.class }, webEnvironment \r\n  = WebEnvironment.DEFINED_PORT)\r\npublic class LiveTest {\r\n \r\n    private static final String API_ROOT\r\n      = \"http://localhost:8081/api/books\";\r\n \r\n    private Book createRandomBook() {\r\n        Book book = new Book();\r\n        book.setTitle(randomAlphabetic(10));\r\n        book.setAuthor(randomAlphabetic(15));\r\n        return book;\r\n    }\r\n \r\n    private String createBookAsUri(Book book) {\r\n        Response response = RestAssured.given()\r\n          .contentType(MediaType.APPLICATION_JSON_VALUE)\r\n          .body(book)\r\n          .post(API_ROOT);\r\n        return API_ROOT + \"/\" + response.jsonPath().get(\"id\");\r\n    }\r\n}\r\nFirst, we can try to find books using variant methods:\r\n\r\n\r\n@Test\r\npublic void whenGetAllBooks_thenOK() {\r\n    Response response = RestAssured.get(API_ROOT);\r\n  \r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n}\r\n \r\n@Test\r\npublic void whenGetBooksByTitle_thenOK() {\r\n    Book book = createRandomBook();\r\n    createBookAsUri(book);\r\n    Response response = RestAssured.get(\r\n      API_ROOT + \"/title/\" + book.getTitle());\r\n     \r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n    assertTrue(response.as(List.class)\r\n      .size() > 0);\r\n}\r\n@Test\r\npublic void whenGetCreatedBookById_thenOK() {\r\n    Book book = createRandomBook();\r\n    String location = createBookAsUri(book);\r\n    Response response = RestAssured.get(location);\r\n     \r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n    assertEquals(book.getTitle(), response.jsonPath()\r\n      .get(\"title\"));\r\n}\r\n \r\n@Test\r\npublic void whenGetNotExistBookById_thenNotFound() {\r\n    Response response = RestAssured.get(API_ROOT + \"/\" + randomNumeric(4));\r\n     \r\n    assertEquals(HttpStatus.NOT_FOUND.value(), response.getStatusCode());\r\n}\r\nNext, we’ll test creating a new book:\r\n\r\n\r\n@Test\r\npublic void whenCreateNewBook_thenCreated() {\r\n    Book book = createRandomBook();\r\n    Response response = RestAssured.given()\r\n      .contentType(MediaType.APPLICATION_JSON_VALUE)\r\n      .body(book)\r\n      .post(API_ROOT);\r\n     \r\n    assertEquals(HttpStatus.CREATED.value(), response.getStatusCode());\r\n}\r\n \r\n@Test\r\npublic void whenInvalidBook_thenError() {\r\n    Book book = createRandomBook();\r\n    book.setAuthor(null);\r\n    Response response = RestAssured.given()\r\n      .contentType(MediaType.APPLICATION_JSON_VALUE)\r\n      .body(book)\r\n      .post(API_ROOT);\r\n     \r\n    assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatusCode());\r\n}\r\nUpdate an existing book:\r\n\r\n\r\n@Test\r\npublic void whenUpdateCreatedBook_thenUpdated() {\r\n    Book book = createRandomBook();\r\n    String location = createBookAsUri(book);\r\n    book.setId(Long.parseLong(location.split(\"api/books/\")[1]));\r\n    book.setAuthor(\"newAuthor\");\r\n    Response response = RestAssured.given()\r\n      .contentType(MediaType.APPLICATION_JSON_VALUE)\r\n      .body(book)\r\n      .put(location);\r\n     \r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n \r\n    response = RestAssured.get(location);\r\n     \r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n    assertEquals(\"newAuthor\", response.jsonPath()\r\n      .get(\"author\"));\r\n}\r\nAnd delete a book:\r\n\r\n\r\n@Test\r\npublic void whenDeleteCreatedBook_thenOk() {\r\n    Book book = createRandomBook();\r\n    String location = createBookAsUri(book);\r\n    Response response = RestAssured.delete(location);\r\n     \r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n \r\n    response = RestAssured.get(location);\r\n    assertEquals(HttpStatus.NOT_FOUND.value(), response.getStatusCode());\r\n}\r\n10. Conclusion\r\nThis was a quick but comprehensive intro to Spring Boot.\r\n\r\nWe of course barely scratched the surface here – there’s a lot more to this framework that we can cover in a single intro article.','2018-07-28 10:30:44','2018-07-28 10:31:24'),
(70,'OOPS design pattern(a)-singleton pattern','Classic pattern in Object-Oriented software design pattern-singleton pattern','<div class=\"markdown-body editormd-preview-container\" previewcontainer=\"true\" style=\"padding: 20px;\"><h2 id=\"h2-foreword\"><a name=\"Foreword\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Foreword</h2><p>Singleton should be the most familiar design pattern for developers, and seems to be the easiest-basically every developer can write it-but is it really?<br>As a Java Developer, maybe you think you know enough about singleton patterns.I don’t want to be alarmist that there must be something you don’t know-after all, I know my own understanding is really limited, but how much do you know?Look down, we’ll talk together.</p>\r\n<h2 id=\"h2-what-is-a-singleton-\"><a name=\"What is a singleton?\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>What is a singleton?</h2><p>The class of singleton object must guarantee that only one instance exists-this is the definition of singleton on Wikipedia, which can also be used as a standard to test the code that is intended to implement the singleton pattern.<br>Ensure that a class has only one instance and provides a global access point to access it.Let the class itself be responsible for saving the only instance of it.<br>This class can guarantee that no other instance can be created(by intercepting a request to create a new object), and it can provide a way to access that instance</p>\r\n<h2 id=\"h2-examples\"><a name=\"Examples\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Examples</h2><p> In a film, The role of the director is crucial, usually a film has only one General Director.In the filming process of the film, it is possible to design multiple studios, Directors need to be directed separately for different actors, but all the actors and directors are the same person, “ the Director called over” this process can be regarded as a single instance of the process to obtain the model</p>\r\n<h2 id=\"h2-pattern-analysis\"><a name=\"Pattern analysis\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Pattern analysis</h2><p>First look at the simplest way to write:<br>public class Single {<br>    private static Single instance;<br>    public static Single getInstance() {<br>        if (instance = = null) {<br>            instance = new Single();<br>        }<br>        return instance;<br>    }<br>} </p>\r\n<p>Change the constructor to private to prevent external class calls</p>\r\n<p>public class Singleton {<br>    private static Singleton instance;<br>    private Singleton() {}<br>    public static Singleton getInstance() {<br>        if (instance = = null) {<br>            instance = new Singleton();<br>        }<br>        return instance;<br>    }<br>}<br>Each time before obtaining an instance of the object to be judged empty, if the object is null then instantiate an instance, if there is a direct return to the instance.This method is perfect on the surface, as if there is only one instance.However, when multiple threads are running, if two different threads are running to null, each instance is created separately, which is not a singleton<br>Add the synchronized keyword on the getInstance() method<br>public class Singleton {<br>    private static Singleton instance;<br>    private Singleton() {}<br>    public static synchronized Singleton getInstance() {<br>        if (instance = = null) {<br>            instance = new Singleton();<br>        }<br>        return instance;<br>    }<br>}<br>This ensures that the write getInstance method at the same time there will be only one thread execution, but doing so will make the implementation of this method in addition to the smooth execution of the thread, all other threads have to wait,which will cause great overhead, reducing the operating efficiency of the program</p>\r\n<p>This method is too expensive, because regardless of whether the instance is null, each time the implementation of the whole method are added to the lock, we may wish to lock the range as narrow as possible, to minimize the impact on performance, so there is the following written law<br>public class Singleton {<br>    private static Singleton instance;<br>    private Singleton() {}<br>    public static Singleton getInstance() {<br>        if (instance = = null) {<br>            (Singleton.class) {<br>                if (instance = = null) {<br>                    instance = new Singleton();<br>                }<br>            }<br>        }<br>        return instance;<br>    }<br>} </p>\r\n<p>Only when the instance is null only when the implementation of the synchronization code block, the second judgment to ensure that no more than empty instances</p>\r\n<p> This seems no problem，But in the computer，Sometimes in order to improve operational efficiency, the instruction will be remade, such as</p>\r\n<p>int a; / / statement A<br>a = 3; / / statement B<br>int b = 5; / / statement C<br>int c = a + b; / / statement D<br>``</p>\r\n<blockquote>\r\n<p>may be rearranged A-C-B-D or C-A-B-D</p>\r\n</blockquote>\r\n<p> if the getInstance operation is rearranged, then instance will exist a” NOT null but still not initialized “ state, that has been assigned to the instance memory space but did not call the constructor of Singleton to initialize instance, execute judgment empty thread grab before the initialization operation is completed, then return directly instance will certainly be given an error</p>\r\n<blockquote>\r\n<p>So with the final version, add the volatile keyword<br>public class Singleton {<br>    private static volatile Singleton instance;<br>    private Singleton() {}<br>    public static Singleton getInstance() {<br>        if (instance == null) {<br>            synchronized (Singleton.class) {<br>                if (instance == null) {<br>                    instance = new Singleton();<br>                }<br>            }<br>        }<br>        return instance;<br>    }<br>} </p>\r\n</blockquote>\r\n<p>The  volatile keyword has the function of masking instruction rearrangement, i.e. adding a lock to instance, which does not allow other threads to perform read operations until the write operation is completed.</p>\r\n<p> The enumeration type is thread-safe, so it is very convenient to implement an enumeration class as a singleton pattern</p>\r\n<p>public enum Singleton {<br>    INSTANCE.;<br>}</p>\r\n<blockquote>\r\n<p>Get an instance of the singleton through an enumeration class<br>Singleton result = Singleton.INSTANCE.;</p>\r\n<h3 id=\"h3-knowledge-point-when-is-class-loading-time-\"><a name=\"Knowledge point: when is Class loading time?\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Knowledge point: when is Class loading time?</h3></blockquote>\r\n<p> The single instance is instantiated at the time of class loading, and when Is it”at the time of class loading”?</p>\r\n<blockquote>\r\n<p>Not strictly speaking, there are generally so few conditions that will trigger a class to be loaded：</p>\r\n<ol>\r\n<li>new when an object</li><li>When you create an instance of it using reflection</li><li>When the child class is loaded, if the parent class has not yet been loaded, the parent class is loaded first</li><li>the main class that is executed when the jvm is started is first loaded</li></ol>\r\n</blockquote>\r\n<h2 id=\"h2-applicable-scenarios\"><a name=\"Applicable scenarios\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Applicable scenarios</h2><blockquote>\r\n<ul>\r\n<li>The class can have only one instance and the customer can access it from a well-known access point</li><li>This unique instance should be subclassed and extensible, and customers should be able to use an extended instance without changing the code</li></ul>\r\n</blockquote>\r\n<h2 id=\"h2-summary\"><a name=\"Summary\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Summary</h2><p>OK, see here, you will feel the single mode is the most simple design mode?Look back at the singleton implementation in your previous code and feel invulnerable?<br>Maybe we don’t have that strict requirement for singleton implementation in actual development.For example, if I can guarantee that all getInstance is in one thread, then in fact the first simplest textbook way is enough.For example, sometimes my singleton has become more than one, and it may have little effect on the program……<br>But if we can learn more details about it, if there’s a problem with the program, we can at least have one more point to troubleshoot.You can go home early to eat…….- D</p>\r\n<p>—— Also, the perfect scheme is not there, in any way there will be a”degree” problem.For example, you feel the code has been flawless, but because you are using the JAVA language, ClassLoader may have some bugs…… Your code who runs on the JVM, probably the JVM itself has bugs…… Your code is running on the phone, maybe there is a problem with the phone system…… You live in this universe, maybe the universe itself has some bugs……. o.<br>So, try to be able to do the best on the line.</p>\r\n<p>—- Thank you for spending a lot of time to see here, I hope you do not feel wasted.</p>\r\n</div>','## Foreword\r\nSingleton should be the most familiar design pattern for developers, and seems to be the easiest-basically every developer can write it-but is it really?\r\nAs a Java Developer, maybe you think you know enough about singleton patterns.I don\'t want to be alarmist that there must be something you don\'t know-after all, I know my own understanding is really limited, but how much do you know?Look down, we\'ll talk together.\r\n\r\n## What is a singleton?\r\nThe class of singleton object must guarantee that only one instance exists-this is the definition of singleton on Wikipedia, which can also be used as a standard to test the code that is intended to implement the singleton pattern.\r\nEnsure that a class has only one instance and provides a global access point to access it.Let the class itself be responsible for saving the only instance of it.\r\nThis class can guarantee that no other instance can be created(by intercepting a request to create a new object), and it can provide a way to access that instance\r\n\r\n## Examples\r\n In a film, The role of the director is crucial, usually a film has only one General Director.In the filming process of the film, it is possible to design multiple studios, Directors need to be directed separately for different actors, but all the actors and directors are the same person, \" the Director called over” this process can be regarded as a single instance of the process to obtain the model\r\n\r\n## Pattern analysis\r\nFirst look at the simplest way to write:\r\npublic class Single {\r\n    private static Single instance;\r\n    public static Single getInstance() {\r\n        if (instance = = null) {\r\n            instance = new Single();\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n\r\nChange the constructor to private to prevent external class calls\r\n\r\npublic class Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    public static Singleton getInstance() {\r\n        if (instance = = null) {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n}\r\nEach time before obtaining an instance of the object to be judged empty, if the object is null then instantiate an instance, if there is a direct return to the instance.This method is perfect on the surface, as if there is only one instance.However, when multiple threads are running, if two different threads are running to null, each instance is created separately, which is not a singleton\r\nAdd the synchronized keyword on the getInstance() method\r\npublic class Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    public static synchronized Singleton getInstance() {\r\n        if (instance = = null) {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n} \r\nThis ensures that the write getInstance method at the same time there will be only one thread execution, but doing so will make the implementation of this method in addition to the smooth execution of the thread, all other threads have to wait,which will cause great overhead, reducing the operating efficiency of the program\r\n\r\nThis method is too expensive, because regardless of whether the instance is null, each time the implementation of the whole method are added to the lock, we may wish to lock the range as narrow as possible, to minimize the impact on performance, so there is the following written law\r\npublic class Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    public static Singleton getInstance() {\r\n        if (instance = = null) {\r\n            (Singleton.class) {\r\n                if (instance = = null) {\r\n                    instance = new Singleton();\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n\r\nOnly when the instance is null only when the implementation of the synchronization code block, the second judgment to ensure that no more than empty instances\r\n\r\n This seems no problem，But in the computer，Sometimes in order to improve operational efficiency, the instruction will be remade, such as\r\n\r\nint a; / / statement A\r\na = 3; / / statement B\r\nint b = 5; / / statement C\r\nint c = a + b; / / statement D\r\n``\r\n> may be rearranged A-C-B-D or C-A-B-D\r\n\r\n if the getInstance operation is rearranged, then instance will exist a” NOT null but still not initialized \" state, that has been assigned to the instance memory space but did not call the constructor of Singleton to initialize instance, execute judgment empty thread grab before the initialization operation is completed, then return directly instance will certainly be given an error\r\n\r\n> So with the final version, add the volatile keyword\r\npublic class Singleton {\r\n    private static volatile Singleton instance;\r\n    private Singleton() {}\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            synchronized (Singleton.class) {\r\n                if (instance == null) {\r\n                    instance = new Singleton();\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n} \r\n\r\nThe  volatile keyword has the function of masking instruction rearrangement, i.e. adding a lock to instance, which does not allow other threads to perform read operations until the write operation is completed.\r\n\r\n The enumeration type is thread-safe, so it is very convenient to implement an enumeration class as a singleton pattern\r\n\r\n\r\npublic enum Singleton {\r\n    INSTANCE.;\r\n}\r\n> Get an instance of the singleton through an enumeration class\r\nSingleton result = Singleton.INSTANCE.;\r\n### Knowledge point: when is Class loading time?\r\n\r\n The single instance is instantiated at the time of class loading, and when Is it\"at the time of class loading\"?\r\n\r\n> Not strictly speaking, there are generally so few conditions that will trigger a class to be loaded：\r\n> 1. new when an object\r\n> 2. When you create an instance of it using reflection\r\n> 3. When the child class is loaded, if the parent class has not yet been loaded, the parent class is loaded first\r\n> 4. the main class that is executed when the jvm is started is first loaded\r\n\r\n## Applicable scenarios\r\n\r\n> * The class can have only one instance and the customer can access it from a well-known access point\r\n> * This unique instance should be subclassed and extensible, and customers should be able to use an extended instance without changing the code\r\n\r\n## Summary\r\nOK, see here, you will feel the single mode is the most simple design mode?Look back at the singleton implementation in your previous code and feel invulnerable?\r\nMaybe we don\'t have that strict requirement for singleton implementation in actual development.For example, if I can guarantee that all getInstance is in one thread, then in fact the first simplest textbook way is enough.For example, sometimes my singleton has become more than one, and it may have little effect on the program……\r\nBut if we can learn more details about it, if there\'s a problem with the program, we can at least have one more point to troubleshoot.You can go home early to eat.......- D\r\n\r\n—— Also, the perfect scheme is not there, in any way there will be a\"degree\" problem.For example, you feel the code has been flawless, but because you are using the JAVA language, ClassLoader may have some bugs...... Your code who runs on the JVM, probably the JVM itself has bugs...... Your code is running on the phone, maybe there is a problem with the phone system...... You live in this universe, maybe the universe itself has some bugs....... o.\r\nSo, try to be able to do the best on the line.\r\n\r\n—- Thank you for spending a lot of time to see here, I hope you do not feel wasted.','2018-07-28 10:33:06','2018-07-28 10:33:06');

/*Table structure for table `resume` */

DROP TABLE IF EXISTS `resume`;

CREATE TABLE `resume` (
  `id` int(12) unsigned NOT NULL AUTO_INCREMENT COMMENT 'PrimaryKey',
  `title` varchar(50) DEFAULT NULL,
  `introduction` text,
  `html_material` text COMMENT 'Article html content',
  `md_material` text COMMENT 'Article content',
  `gmt_create` datetime DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `resume` */

insert  into `resume`(`id`,`title`,`introduction`,`html_material`,`md_material`,`gmt_create`,`gmt_modified`) values 
(1,'Developer','Developer resume','<div class=\"markdown-body editormd-preview-container\" previewcontainer=\"true\" style=\"padding: 20px;\"><h1 id=\"h1-ravi-teja-bollimuntha\"><a name=\"Ravi Teja Bollimuntha\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Ravi Teja Bollimuntha</h1><h2 id=\"h2-contact-details-\"><a name=\"Contact Details:\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Contact Details:</h2><ul>\r\n<li>Email：<a href=\"mailto:raviteja.bollimuntha@gmail.com\">raviteja.bollimuntha@gmail.com</a></li></ul>\r\n<h2 id=\"h2-personal-information\"><a name=\"Personal information\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Personal information</h2><ul>\r\n<li>Gende: male<br>-Date of Birth: 1996.11.05</li><li>Undergraduate/Hebei University of Science and technology College of technology/software engineering</li><li>Years of work: 2019 Intern</li><li>Github: <a href=\"https://github.com/RaviTejaBollimuntha\">https://github.com/RaviTejaBollimuntha</a></li><li>Expected position: Java backend development</li><li>Expected salary: 7K-8k monthly salary before tax</li><li>Expected city:india</li></ul>\r\n<h2 id=\"h2-project-experience\"><a name=\"Project experience\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Project experience</h2><h3 id=\"h3-engineering-quality-audit-platform\"><a name=\"Engineering quality audit platform\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Engineering quality audit platform</h3><p>This is a decorative enterprise internal project, for the implementation of the project site photo archiving, superior Department of audit, feedback and other functions, back-end using SSM architecture, MySQL database.I am responsible for the development of the back-end image archiving module, the parent Department audit feedback module and the mobile terminal data upload module.The mobile side can not properly select the file because of compatibility, and finally to Retrofit asynchronous upload instead of the traditional form submission.Back-end to achieve a temporary storage of Engineering materials, front-end to achieve a wait WIFI Unified upload files.</p>\r\n<h2 id=\"h2-open-source-projects-and-works-\"><a name=\"Open source projects and works:\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Open source projects and works:</h2><p> <a href=\"[url_github_home]\">FS-Blog</a>：A personal blog based on Spring Boot</p>\r\n<h2 id=\"h2-skills-list\"><a name=\"Skills list\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Skills list</h2><ul>\r\n<li>Backend development: Spring/SpringBoot/MyBatis / Freemarker<br>Web framework: Spring MVC/Spring WebFlux</li><li>Front-end framework: Vue.js/jQuery / Bootstrap/EasyUI</li><li>Database related:MySQL/MSSQL/Redis</li><li>Version management, documentation and automated Deployment Tools: Git / SVN / Docker / Travis</li><li>Log related:Log4j/Slf4j</li><li>Unit testing: JUnit</li><li>Operating system: Windows/Linux</li><li>Server: Tomcat/Nginx/Apache<br>Building, dependency management tools：Maven/Gradle</li></ul>\r\n<h2 id=\"h2-other-experiences\"><a name=\"Other experiences\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Other experiences</h2><ul>\r\n<li>Spring, Google Gson Part of the source code.</li><li>Second prize of North China five provinces and Hong Kong, Macao and Taiwan computer application contest</li></ul>\r\n</div>','#         Ravi Teja Bollimuntha\r\n\r\n## Contact Details:\r\n- Email：raviteja.bollimuntha@gmail.com\r\n\r\n## Personal information\r\n- Gende: male\r\n-Date of Birth: 1996.11.05\r\n- Undergraduate/Hebei University of Science and technology College of technology/software engineering\r\n- Years of work: 2019 Intern\r\n- Github: [https://github.com/RaviTejaBollimuntha] [url_github_home]\r\n- Expected position: Java backend development\r\n- Expected salary: 7K-8k monthly salary before tax\r\n- Expected city:india\r\n\r\n## Project experience\r\n### Engineering quality audit platform\r\nThis is a decorative enterprise internal project, for the implementation of the project site photo archiving, superior Department of audit, feedback and other functions, back-end using SSM architecture, MySQL database.I am responsible for the development of the back-end image archiving module, the parent Department audit feedback module and the mobile terminal data upload module.The mobile side can not properly select the file because of compatibility, and finally to Retrofit asynchronous upload instead of the traditional form submission.Back-end to achieve a temporary storage of Engineering materials, front-end to achieve a wait WIFI Unified upload files.\r\n\r\n## Open source projects and works:\r\n [FS-Blog]([url_github_home])：A personal blog based on Spring Boot\r\n\r\n## Skills list\r\n- Backend development: Spring/SpringBoot/MyBatis / Freemarker\r\n Web framework: Spring MVC/Spring WebFlux\r\n- Front-end framework: Vue.js/jQuery / Bootstrap/EasyUI\r\n- Database related:MySQL/MSSQL/Redis\r\n- Version management, documentation and automated Deployment Tools: Git / SVN / Docker / Travis\r\n- Log related:Log4j/Slf4j\r\n- Unit testing: JUnit\r\n- Operating system: Windows/Linux\r\n- Server: Tomcat/Nginx/Apache\r\n Building, dependency management tools：Maven/Gradle\r\n\r\n## Other experiences\r\n- Spring, Google Gson Part of the source code.\r\n- Second prize of North China five provinces and Hong Kong, Macao and Taiwan computer application contest\r\n\r\n[url_github_fsblog]: https://github.com/RaviTejaBollimuntha/FS-Blog-master\r\n[url_github_home]: https://github.com/RaviTejaBollimuntha','2018-03-28 16:38:58','2018-07-28 09:20:02');

/*Table structure for table `tag` */

DROP TABLE IF EXISTS `tag`;

CREATE TABLE `tag` (
  `id` int(12) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(30) DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

/*Data for the table `tag` */

insert  into `tag`(`id`,`name`,`gmt_create`,`gmt_modified`) values 
(13,'SpringBoot','2017-12-09 15:26:30','2017-12-09 15:26:30'),
(14,'MyBatis','2017-12-09 15:26:31','2017-12-09 15:26:31'),
(15,'MVC','2017-12-09 15:26:31','2017-12-09 15:26:31'),
(16,'AOP','2017-12-09 15:26:31','2017-12-09 15:26:31'),
(17,'Servlet','2017-12-09 23:51:56','2017-12-16 15:42:45'),
(18,'','2018-07-28 10:26:03','2018-07-28 10:26:03'),
(19,'Bootstrap a Simple Application','2018-07-28 10:30:44','2018-07-28 10:30:44');

/*Table structure for table `tag_article` */

DROP TABLE IF EXISTS `tag_article`;

CREATE TABLE `tag_article` (
  `id` int(12) NOT NULL AUTO_INCREMENT,
  `tag_id` int(12) NOT NULL COMMENT 'Tag_ID',
  `article_id` int(12) NOT NULL COMMENT 'Article_ID',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`,`tag_id`,`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

/*Data for the table `tag_article` */

insert  into `tag_article`(`id`,`tag_id`,`article_id`,`gmt_create`,`gmt_modified`) values 
(2,13,24,'2017-12-09 15:26:31','2017-12-09 15:26:31'),
(3,14,24,'2017-12-09 15:26:31','2017-12-09 15:26:31'),
(4,15,24,'2017-12-09 15:26:31','2017-12-09 15:26:31'),
(5,16,24,'2017-12-09 15:26:31','2017-12-09 15:26:31'),
(6,17,24,'2017-12-09 23:52:12','2017-12-09 23:52:12'),
(7,17,23,'2017-12-09 23:54:21','2017-12-09 23:54:21'),
(8,13,22,'2017-12-09 23:58:14','2017-12-16 15:43:34'),
(9,18,68,'2018-07-28 10:26:03','2018-07-28 10:26:03'),
(10,19,69,'2018-07-28 10:30:44','2018-07-28 10:30:44'),
(11,18,70,'2018-07-28 10:33:06','2018-07-28 10:33:06'),
(12,18,71,'2018-07-28 12:53:29','2018-07-28 12:53:29');

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int(12) unsigned NOT NULL AUTO_INCREMENT COMMENT 'PrimaryKey',
  `username` varchar(20) NOT NULL COMMENT 'username',
  `password` varchar(50) NOT NULL,
  `birth_date` date DEFAULT NULL,
  `nickname` varchar(20) DEFAULT NULL,
  `email` varchar(40) DEFAULT NULL,
  `github` varchar(40) DEFAULT NULL,
  `qq` varchar(15) DEFAULT NULL,
  `wecaht` varchar(20) DEFAULT NULL,
  `hobby` text,
  `motto` text,
  `md_info` text,
  `avatar` varchar(255) DEFAULT NULL COMMENT 'Avatar url',
  `status` int(3) NOT NULL DEFAULT '0' COMMENT 'Status/0: normal/1: ban',
  `level` int(2) NOT NULL DEFAULT '0' COMMENT 'Level',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`username`,`password`,`birth_date`,`nickname`,`email`,`github`,`qq`,`wecaht`,`hobby`,`motto`,`md_info`,`avatar`,`status`,`level`,`gmt_create`,`gmt_modified`) values 
(23,'ZBL','4d8812dbb1bc41c2d4af4a9967bff7a7',NULL,'ZBL',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,0,'2017-12-06 18:48:37','2017-12-08 23:54:00'),
(25,'18333298410','5b3ea3a80775c95c608cd3c220f2a754',NULL,'18333298410',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,0,'2017-12-09 00:06:36','2017-12-16 15:43:53'),
(26,'raviteja','08443609a5a6cdb032ac635dff9e0b99',NULL,'brt',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,0,'2018-07-27 22:45:11','2018-07-27 22:45:11');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
